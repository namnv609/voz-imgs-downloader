#!/usr/bin/env python

from bs4 import BeautifulSoup
import re, argparse, urllib, os, requests

requests.packages.urllib3.disable_warnings()

def downloadImage(threadID, targetDir, download, startPage = 1, endPage = 1):
    if download == False:
        f = open('%s/list-%d-%d-%d' % (targetDir, threadID, startPage, endPage), 'w')

    for page in xrange(startPage, (endPage + 1)):
        webUrl = 'https://vozforums.com/showthread.php?t=%d&page=%d' % (threadID, page)
        request = requests.get(webUrl)
        if request.status_code == 200:
            print '----------Page %d----------' % page

            pageDOM = BeautifulSoup(request.text, 'html5lib')
            imgs = pageDOM.select('.voz-post-message img')
            images = imageExtractor(imgs)

            if len(images):
                for index, image in enumerate(images):
                    try:
                        if download == False:
                            f.write('%s\n' % image)
                        else:
                            urllib.urlretrieve(image, '%s/%s' % (targetDir, os.path.basename(image)))
                        print 'Dowloaded (%d/%d): %s' % ((index+1), len(images), image)
                    except:
                        pass
            else:
                print 'Image(s) not found!!'

            print '----------End page %d----------' % page
        else:
            print 'Occurred error %s' % request.status_code

def imageExtractor(images):
    imageList = list()

    if len(images):
        for image in images:
            if re.match('^http', image['src']):
                imageList.append(image['src'])

    return imageList

parser = argparse.ArgumentParser(description='vOz Images Downloader')
parser.add_argument('id', help='Thread ID', type=int)
parser.add_argument('start', help='Start page', type=int)
parser.add_argument('end', help='End page', type=int)
parser.add_argument('dir', help='Target directory to save downloaded files', type=str)
parser.add_argument('--no-download', help='Skip download and save links to file in target directory', dest='download', action='store_false')
parser.set_defaults(download=True)

args = parser.parse_args()

downloadImage(args.id, args.dir, args.download, args.start, args.end)


